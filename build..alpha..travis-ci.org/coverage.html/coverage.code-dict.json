{"/home/travis/build/npmtest/node-npmtest-bluebird-retry/test.js":"/* istanbul instrument in package npmtest_bluebird_retry */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-bluebird-retry/lib.npmtest_bluebird_retry.js":"/* istanbul instrument in package npmtest_bluebird_retry */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_bluebird_retry = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_bluebird_retry = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-bluebird-retry/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-bluebird-retry && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_bluebird_retry */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_bluebird_retry\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_bluebird_retry.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_bluebird_retry.rollup.js'] =\n            local.assetsDict['/assets.npmtest_bluebird_retry.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_bluebird_retry.__dirname + '/lib.npmtest_bluebird_retry.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-bluebird-retry/node_modules/bluebird-retry/index.js":"\nmodule.exports = require('./lib/bluebird-retry');\n","/home/travis/build/npmtest/node-npmtest-bluebird-retry/node_modules/bluebird-retry/lib/bluebird-retry.js":"var Promise = require('bluebird');\n\n// Subclass of Error that can be thrown to indicate that retry should stop.\n//\n// If called with an instance of Error subclass, then the retry promise will be\n// rejected with the given error.\n//\n// Otherwise the cancel error object itself is propagated to the caller.\n//\nfunction StopError(err) {\n    this.name = 'StopError';\n    if (err instanceof Error) {\n        this.err = err\n    } else {\n        this.message = err || 'cancelled'\n    }\n}\nStopError.prototype = Object.create(Error.prototype);\n\nretry.StopError = StopError;\n\n\n// Retry `func` until it succeeds.\n//\n// For each attempt, invokes `func` with `options.args` as arguments and\n// `options.context` as `this`.\n//\n// Waits `options.interval` milliseconds (default 1000) between attempts.\n//\n// Increases wait by a factor of `options.backoff` each interval, up to\n// a limit of `options.max_interval`.\n//\n// Keeps trying until `options.timeout` milliseconds have elapsed,\n// or `options.max_tries` have been attempted, whichever comes first.\n//\n// If neither is specified, then the default is to make 5 attempts.\n//\n\nfunction retry(func, options) {\n    options = options || {};\n\n    var interval = typeof options.interval === 'number' ? options.interval : 1000;\n\n    var max_tries, giveup_time;\n    if (typeof(options.max_tries) !== 'undefined') {\n        max_tries = options.max_tries;\n    }\n\n    if (options.timeout) {\n        giveup_time = new Date().getTime() + options.timeout;\n    }\n\n    if (!max_tries && !giveup_time) {\n        max_tries = 5;\n    }\n\n    var tries = 0;\n    var start = new Date().getTime();\n\n    // If the user didn't supply a predicate function then add one that\n    // always succeeds.\n    //\n    // This is used in bluebird's filtered catch to flag the error types\n    // that should retry.\n    var predicate = options.predicate || function(err) { return true; }\n    var stopped = false;\n\n    function try_once() {\n        var tryStart = new Date().getTime();\n        return Promise.attempt(function() {\n                return func.apply(options.context, options.args);\n            })\n            .caught(StopError, function(err) {\n                stopped = true;\n                if (err.err instanceof Error) {\n                    return Promise.reject(err.err);\n                } else {\n                    return Promise.reject(err);\n                }\n            })\n            .caught(predicate, function(err) {\n                if (stopped) {\n                    return Promise.reject(err);\n                }\n                ++tries;\n                if (tries > 1) {\n                    interval = backoff(interval, options);\n                }\n                var now = new Date().getTime();\n\n                if ((max_tries && (tries === max_tries) ||\n                    (giveup_time && (now + interval >= giveup_time)))) {\n\n                    if (! (err instanceof Error)) {\n                        var failure = err;\n\n                        if (failure) {\n                          if (typeof failure !== 'string') {\n                            failure = JSON.stringify(failure);\n                          }\n                        }\n\n                        err = new Error('rejected with non-error: ' + failure);\n                        err.failure = failure;\n                    } else if (options.throw_original) {\n                      return Promise.reject(err);\n                    }\n\n                    var timeout = new Error('operation timed out after ' + (now - start) + ' ms, ' + tries + ' tries with error: ' + err.message);\n                    timeout.failure = err;\n                    timeout.code = 'ETIMEDOUT';\n                    return Promise.reject(timeout);\n                } else {\n                    var delay = interval - (now - tryStart);\n                    if (delay <= 0) {\n                        return try_once();\n                    } else {\n                        return Promise.delay(delay).then(try_once);\n                    }\n                }\n            });\n    }\n    return try_once();\n}\n\n// Return the updated interval after applying the various backoff options\nfunction backoff(interval, options) {\n    if (options.backoff) {\n        interval = interval * options.backoff;\n    }\n\n    if (options.max_interval) {\n        interval = Math.min(interval, options.max_interval);\n    }\n\n    return interval;\n}\n\nmodule.exports = retry;\n","/home/travis/build/npmtest/node-npmtest-bluebird-retry/node_modules/bluebird-retry/browser/bluebird-retry.js":"(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.bluebirdRetry = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nvar Promise = require('bluebird');\n\n// Subclass of Error that can be thrown to indicate that retry should stop.\n//\n// If called with an instance of Error subclass, then the retry promise will be\n// rejected with the given error.\n//\n// Otherwise the cancel error object itself is propagated to the caller.\n//\nfunction StopError(err) {\n    this.name = 'StopError';\n    if (err instanceof Error) {\n        this.err = err\n    } else {\n        this.message = err || 'cancelled'\n    }\n}\nStopError.prototype = Object.create(Error.prototype);\n\nretry.StopError = StopError;\n\n\n// Retry `func` until it succeeds.\n//\n// For each attempt, invokes `func` with `options.args` as arguments and\n// `options.context` as `this`.\n//\n// Waits `options.interval` milliseconds (default 1000) between attempts.\n//\n// Increases wait by a factor of `options.backoff` each interval, up to\n// a limit of `options.max_interval`.\n//\n// Keeps trying until `options.timeout` milliseconds have elapsed,\n// or `options.max_tries` have been attempted, whichever comes first.\n//\n// If neither is specified, then the default is to make 5 attempts.\n//\n\nfunction retry(func, options) {\n    options = options || {};\n\n    var interval = typeof options.interval === 'number' ? options.interval : 1000;\n\n    var max_tries, giveup_time;\n    if (typeof(options.max_tries) !== 'undefined') {\n        max_tries = options.max_tries;\n    }\n\n    if (options.timeout) {\n        giveup_time = new Date().getTime() + options.timeout;\n    }\n\n    if (!max_tries && !giveup_time) {\n        max_tries = 5;\n    }\n\n    var tries = 0;\n    var start = new Date().getTime();\n\n    // If the user didn't supply a predicate function then add one that\n    // always succeeds.\n    //\n    // This is used in bluebird's filtered catch to flag the error types\n    // that should retry.\n    var predicate = options.predicate || function(err) { return true; }\n    var stopped = false;\n\n    function try_once() {\n        var tryStart = new Date().getTime();\n        return Promise.attempt(function() {\n                return func.apply(options.context, options.args);\n            })\n            .caught(StopError, function(err) {\n                stopped = true;\n                if (err.err instanceof Error) {\n                    return Promise.reject(err.err);\n                } else {\n                    return Promise.reject(err);\n                }\n            })\n            .caught(predicate, function(err) {\n                if (stopped) {\n                    return Promise.reject(err);\n                }\n                ++tries;\n                if (tries > 1) {\n                    interval = backoff(interval, options);\n                }\n                var now = new Date().getTime();\n\n                if ((max_tries && (tries === max_tries) ||\n                    (giveup_time && (now + interval >= giveup_time)))) {\n\n                    if (! (err instanceof Error)) {\n                        var failure = err;\n\n                        if (failure) {\n                          if (typeof failure !== 'string') {\n                            failure = JSON.stringify(failure);\n                          }\n                        }\n\n                        err = new Error('rejected with non-error: ' + failure);\n                        err.failure = failure;\n                    } else if (options.throw_original) {\n                      return Promise.reject(err);\n                    }\n\n                    var timeout = new Error('operation timed out after ' + (now - start) + ' ms, ' + tries + ' tries with error: ' + err.message);\n                    timeout.failure = err;\n                    timeout.code = 'ETIMEDOUT';\n                    return Promise.reject(timeout);\n                } else {\n                    var delay = interval - (now - tryStart);\n                    if (delay <= 0) {\n                        return try_once();\n                    } else {\n                        return Promise.delay(delay).then(try_once);\n                    }\n                }\n            });\n    }\n    return try_once();\n}\n\n// Return the updated interval after applying the various backoff options\nfunction backoff(interval, options) {\n    if (options.backoff) {\n        interval = interval * options.backoff;\n    }\n\n    if (options.max_interval) {\n        interval = Math.min(interval, options.max_interval);\n    }\n\n    return interval;\n}\n\nmodule.exports = retry;\n\n},{\"bluebird\":undefined}]},{},[1])(1)\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJsaWIvYmx1ZWJpcmQtcmV0cnkuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsInZhciBQcm9taXNlID0gcmVxdWlyZSgnYmx1ZWJpcmQnKTtcblxuLy8gU3ViY2xhc3Mgb2YgRXJyb3IgdGhhdCBjYW4gYmUgdGhyb3duIHRvIGluZGljYXRlIHRoYXQgcmV0cnkgc2hvdWxkIHN0b3AuXG4vL1xuLy8gSWYgY2FsbGVkIHdpdGggYW4gaW5zdGFuY2Ugb2YgRXJyb3Igc3ViY2xhc3MsIHRoZW4gdGhlIHJldHJ5IHByb21pc2Ugd2lsbCBiZVxuLy8gcmVqZWN0ZWQgd2l0aCB0aGUgZ2l2ZW4gZXJyb3IuXG4vL1xuLy8gT3RoZXJ3aXNlIHRoZSBjYW5jZWwgZXJyb3Igb2JqZWN0IGl0c2VsZiBpcyBwcm9wYWdhdGVkIHRvIHRoZSBjYWxsZXIuXG4vL1xuZnVuY3Rpb24gU3RvcEVycm9yKGVycikge1xuICAgIHRoaXMubmFtZSA9ICdTdG9wRXJyb3InO1xuICAgIGlmIChlcnIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICB0aGlzLmVyciA9IGVyclxuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9IGVyciB8fCAnY2FuY2VsbGVkJ1xuICAgIH1cbn1cblN0b3BFcnJvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XG5cbnJldHJ5LlN0b3BFcnJvciA9IFN0b3BFcnJvcjtcblxuXG4vLyBSZXRyeSBgZnVuY2AgdW50aWwgaXQgc3VjY2VlZHMuXG4vL1xuLy8gRm9yIGVhY2ggYXR0ZW1wdCwgaW52b2tlcyBgZnVuY2Agd2l0aCBgb3B0aW9ucy5hcmdzYCBhcyBhcmd1bWVudHMgYW5kXG4vLyBgb3B0aW9ucy5jb250ZXh0YCBhcyBgdGhpc2AuXG4vL1xuLy8gV2FpdHMgYG9wdGlvbnMuaW50ZXJ2YWxgIG1pbGxpc2Vjb25kcyAoZGVmYXVsdCAxMDAwKSBiZXR3ZWVuIGF0dGVtcHRzLlxuLy9cbi8vIEluY3JlYXNlcyB3YWl0IGJ5IGEgZmFjdG9yIG9mIGBvcHRpb25zLmJhY2tvZmZgIGVhY2ggaW50ZXJ2YWwsIHVwIHRvXG4vLyBhIGxpbWl0IG9mIGBvcHRpb25zLm1heF9pbnRlcnZhbGAuXG4vL1xuLy8gS2VlcHMgdHJ5aW5nIHVudGlsIGBvcHRpb25zLnRpbWVvdXRgIG1pbGxpc2Vjb25kcyBoYXZlIGVsYXBzZWQsXG4vLyBvciBgb3B0aW9ucy5tYXhfdHJpZXNgIGhhdmUgYmVlbiBhdHRlbXB0ZWQsIHdoaWNoZXZlciBjb21lcyBmaXJzdC5cbi8vXG4vLyBJZiBuZWl0aGVyIGlzIHNwZWNpZmllZCwgdGhlbiB0aGUgZGVmYXVsdCBpcyB0byBtYWtlIDUgYXR0ZW1wdHMuXG4vL1xuXG5mdW5jdGlvbiByZXRyeShmdW5jLCBvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICB2YXIgaW50ZXJ2YWwgPSB0eXBlb2Ygb3B0aW9ucy5pbnRlcnZhbCA9PT0gJ251bWJlcicgPyBvcHRpb25zLmludGVydmFsIDogMTAwMDtcblxuICAgIHZhciBtYXhfdHJpZXMsIGdpdmV1cF90aW1lO1xuICAgIGlmICh0eXBlb2Yob3B0aW9ucy5tYXhfdHJpZXMpICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBtYXhfdHJpZXMgPSBvcHRpb25zLm1heF90cmllcztcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy50aW1lb3V0KSB7XG4gICAgICAgIGdpdmV1cF90aW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgKyBvcHRpb25zLnRpbWVvdXQ7XG4gICAgfVxuXG4gICAgaWYgKCFtYXhfdHJpZXMgJiYgIWdpdmV1cF90aW1lKSB7XG4gICAgICAgIG1heF90cmllcyA9IDU7XG4gICAgfVxuXG4gICAgdmFyIHRyaWVzID0gMDtcbiAgICB2YXIgc3RhcnQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcblxuICAgIC8vIElmIHRoZSB1c2VyIGRpZG4ndCBzdXBwbHkgYSBwcmVkaWNhdGUgZnVuY3Rpb24gdGhlbiBhZGQgb25lIHRoYXRcbiAgICAvLyBhbHdheXMgc3VjY2VlZHMuXG4gICAgLy9cbiAgICAvLyBUaGlzIGlzIHVzZWQgaW4gYmx1ZWJpcmQncyBmaWx0ZXJlZCBjYXRjaCB0byBmbGFnIHRoZSBlcnJvciB0eXBlc1xuICAgIC8vIHRoYXQgc2hvdWxkIHJldHJ5LlxuICAgIHZhciBwcmVkaWNhdGUgPSBvcHRpb25zLnByZWRpY2F0ZSB8fCBmdW5jdGlvbihlcnIpIHsgcmV0dXJuIHRydWU7IH1cbiAgICB2YXIgc3RvcHBlZCA9IGZhbHNlO1xuXG4gICAgZnVuY3Rpb24gdHJ5X29uY2UoKSB7XG4gICAgICAgIHZhciB0cnlTdGFydCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5hdHRlbXB0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KG9wdGlvbnMuY29udGV4dCwgb3B0aW9ucy5hcmdzKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2F1Z2h0KFN0b3BFcnJvciwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgc3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgaWYgKGVyci5lcnIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyLmVycik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXVnaHQocHJlZGljYXRlLCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3RvcHBlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKyt0cmllcztcbiAgICAgICAgICAgICAgICBpZiAodHJpZXMgPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGludGVydmFsID0gYmFja29mZihpbnRlcnZhbCwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBub3cgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcblxuICAgICAgICAgICAgICAgIGlmICgobWF4X3RyaWVzICYmICh0cmllcyA9PT0gbWF4X3RyaWVzKSB8fFxuICAgICAgICAgICAgICAgICAgICAoZ2l2ZXVwX3RpbWUgJiYgKG5vdyArIGludGVydmFsID49IGdpdmV1cF90aW1lKSkpKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCEgKGVyciBpbnN0YW5jZW9mIEVycm9yKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZhaWx1cmUgPSBlcnI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmYWlsdXJlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZmFpbHVyZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWlsdXJlID0gSlNPTi5zdHJpbmdpZnkoZmFpbHVyZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyID0gbmV3IEVycm9yKCdyZWplY3RlZCB3aXRoIG5vbi1lcnJvcjogJyArIGZhaWx1cmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyLmZhaWx1cmUgPSBmYWlsdXJlO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMudGhyb3dfb3JpZ2luYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHZhciB0aW1lb3V0ID0gbmV3IEVycm9yKCdvcGVyYXRpb24gdGltZWQgb3V0IGFmdGVyICcgKyAobm93IC0gc3RhcnQpICsgJyBtcywgJyArIHRyaWVzICsgJyB0cmllcyB3aXRoIGVycm9yOiAnICsgZXJyLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICB0aW1lb3V0LmZhaWx1cmUgPSBlcnI7XG4gICAgICAgICAgICAgICAgICAgIHRpbWVvdXQuY29kZSA9ICdFVElNRURPVVQnO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QodGltZW91dCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlbGF5ID0gaW50ZXJ2YWwgLSAobm93IC0gdHJ5U3RhcnQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGVsYXkgPD0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRyeV9vbmNlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5kZWxheShkZWxheSkudGhlbih0cnlfb25jZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHRyeV9vbmNlKCk7XG59XG5cbi8vIFJldHVybiB0aGUgdXBkYXRlZCBpbnRlcnZhbCBhZnRlciBhcHBseWluZyB0aGUgdmFyaW91cyBiYWNrb2ZmIG9wdGlvbnNcbmZ1bmN0aW9uIGJhY2tvZmYoaW50ZXJ2YWwsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5iYWNrb2ZmKSB7XG4gICAgICAgIGludGVydmFsID0gaW50ZXJ2YWwgKiBvcHRpb25zLmJhY2tvZmY7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMubWF4X2ludGVydmFsKSB7XG4gICAgICAgIGludGVydmFsID0gTWF0aC5taW4oaW50ZXJ2YWwsIG9wdGlvbnMubWF4X2ludGVydmFsKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW50ZXJ2YWw7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcmV0cnk7XG4iXX0=\n"}